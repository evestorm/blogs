import{_ as i,c as t,o as l,a5 as a,j as e,a as s}from"./chunks/framework.CAnTzXjG.js";const n="/blogs/assets/Grid%E5%B8%83%E5%B1%80%E5%85%A5%E9%97%A8/grid.png",r="/blogs/assets/Grid%E5%B8%83%E5%B1%80%E5%85%A5%E9%97%A8/gridvflex.png",d="/blogs/assets/Grid%E5%B8%83%E5%B1%80%E5%85%A5%E9%97%A8/shangexian.png",h="/blogs/assets/Grid%E5%B8%83%E5%B1%80%E5%85%A5%E9%97%A8/shangexianduomingming.png",p="/blogs/assets/Grid%E5%B8%83%E5%B1%80%E5%85%A5%E9%97%A8/shangexianrepeat.png",o="/blogs/assets/Grid%E5%B8%83%E5%B1%80%E5%85%A5%E9%97%A8/grid-template-areas.png",re=JSON.parse('{"title":"Grid 布局入门","description":"","frontmatter":{"date":"2021-04-14T00:00:00.000Z"},"headers":[],"relativePath":"1-前端/2-CSS/3-专题/6-Grid 布局入门.md","filePath":"1-前端/2-CSS/3-专题/6-Grid 布局入门.md"}'),c={name:"1-前端/2-CSS/3-专题/6-Grid 布局入门.md"},g=a('<h1 id="grid-布局入门" tabindex="-1">Grid 布局入门 <a class="header-anchor" href="#grid-布局入门" aria-label="Permalink to &quot;Grid 布局入门&quot;">​</a></h1><h2 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h2><h3 id="什么是-grid-layout" tabindex="-1">什么是 Grid Layout <a class="header-anchor" href="#什么是-grid-layout" aria-label="Permalink to &quot;什么是 Grid Layout&quot;">​</a></h3><p>Grid Layout 翻译过来是[网格布局]的意思，它是一个二维系统，包含了行（row）与列（column）以及间距（gap）。下图能够很好的说明这一点（图片来自<a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS/CSS_layout/Grids" target="_blank" rel="noreferrer">mdn</a>）：</p><p><img src="'+n+'" alt="grid_layout"></p><h3 id="grid-vs-flex" tabindex="-1">Grid vs Flex <a class="header-anchor" href="#grid-vs-flex" aria-label="Permalink to &quot;Grid vs Flex&quot;">​</a></h3><p>工作中写移动端页面的朋友对 Flex 布局肯定不陌生，有些人可能更极端一点，直接 Flex 一把梭。那 Grid 和 Flex 有什么区别呢？我们仍然可以用一张图片进行举例说明：</p><p><img src="'+r+'" alt="grid-vs-flex"></p><p>在上图中，我们可以使用 Grid 来搭建页面的整体结构；而使用 Flex 控制 Grid 中的单个区域，例如顶部导航栏中的具体内容。</p><p><strong>Grid vs Flex 总结</strong></p><ul><li>Grid 是一种二维布局方式，而 Flex 是一维的。</li><li>Grid 重点关注布局, 而 Flex 重点关注内容的流向。</li><li>Flex 适用于应用的组件，而 Grid 适用于应用本身的布局。</li></ul><p>总的来说，Grid 擅长搭建布局结构，而 Flex 则擅长处理元素的流向。</p><h2 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用&quot;">​</a></h2><h3 id="行与列" tabindex="-1">行与列 <a class="header-anchor" href="#行与列" aria-label="Permalink to &quot;行与列&quot;">​</a></h3><p>首先我们需要将容器的 display 属性设置为 grid，然后使用下列 CSS 属性来控制其中的行与列：</p><ul><li>grid-template-columns 用来划分列数</li><li>grid-template-rows 用来划分行数</li></ul><h4 id="固定宽度-百分比宽度" tabindex="-1">固定宽度 &amp; 百分比宽度 <a class="header-anchor" href="#固定宽度-百分比宽度" aria-label="Permalink to &quot;固定宽度 &amp; 百分比宽度&quot;">​</a></h4>',17),k=e("iframe",{height:"826",scrolling:"no",title:"01-grid-行与列基本使用",src:"https://codepen.io/JingW/embed/RwNjowB?height=826&theme-id=default&default-tab=result",frameborder:"no",allowtransparency:"true",allowfullscreen:"true",style:{width:"100%"}},null,-1),u=e("h4",{id:"重复设置",tabindex:"-1"},[s("重复设置 "),e("a",{class:"header-anchor",href:"#重复设置","aria-label":'Permalink to "重复设置"'},"​")],-1),m=e("p",null,[s("通过上面 demo 你会发现一个问题，如果一行有 3 列，我们就需要定义 3 列各自的宽，那如果有 10 列，20 列呢？难道都需要一个个设置，岂不是太麻烦了？所以重复设置的需求应运而生。我们可以使用 "),e("code",null,"repeat"),s(" 统一设置值，第一个参数为重复数量，第二个参数是重复值。下面是两个示例：")],-1),b=e("iframe",{height:"1030",scrolling:"no",title:"02-grid-repeat重复",src:"https://codepen.io/JingW/embed/abzVQmR?height=1020&theme-id=default&default-tab=result",frameborder:"no",allowtransparency:"true",allowfullscreen:"true",style:{width:"100%"}},null,-1),E=e("h4",{id:"比例划分",tabindex:"-1"},[s("比例划分 "),e("a",{class:"header-anchor",href:"#比例划分","aria-label":'Permalink to "比例划分"'},"​")],-1),y=e("p",null,[s("我们还可以像 Flex 布局的 "),e("code",null,"flex: 1"),s(" 那样，给布局中的元素设置比例。在 Grid 中，我们使用 "),e("code",null,"fr"),s(" 这个单位来设置元素在空间中所占的比例。")],-1),_=e("iframe",{height:"700",scrolling:"no",title:"03-grid-比例划分",src:"https://codepen.io/JingW/embed/oNgoQEK?height=700&theme-id=default&default-tab=result",frameborder:"no",allowtransparency:"true",allowfullscreen:"true",style:{width:"100%"}},null,-1),f=a(`<h4 id="组合定义" tabindex="-1">组合定义 <a class="header-anchor" href="#组合定义" aria-label="Permalink to &quot;组合定义&quot;">​</a></h4><p><code>grid-tempalte</code> 是 <code>grid-template-rows</code>、<code>grid-template-columns</code>、<code>grid-template-areas</code> 的三个属性的简写。</p><p>下面是使用 <code>grid-template</code> 同时声明 <code>grid-template-rows、grid-template-columns</code>。</p><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">grid-template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: 100px 1fr / 50px 1fr;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>下面是使用 <code>grid-template</code> 定义 <code>grid-template-areas</code> ，有关 <code>grid-template-areas</code> 的使用方法会在下面介绍：</p><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">grid-template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &#39;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> . </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">.&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &#39;. </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">main</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> .&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &#39;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">footer</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;"> footer</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> .&#39;;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>`,6),x=e("iframe",{height:"1133",scrolling:"no",title:"yLyPQjj",src:"https://codepen.io/JingW/embed/yLyPQjj?height=1133&theme-id=default&default-tab=result",frameborder:"no",allowtransparency:"true",allowfullscreen:"true",style:{width:"100%"}},null,-1),w=e("h4",{id:"minmax",tabindex:"-1"},[s("minmax "),e("a",{class:"header-anchor",href:"#minmax","aria-label":'Permalink to "minmax"'},"​")],-1),v=e("p",null,[s("使用 minmax 方法可以设置取值范围。下面行高在 "),e("code",null,"最小100px ~ 最大1fr"),s(" 间取值：")],-1),A=e("iframe",{height:"531",scrolling:"no",title:"05-grid-minmax设置最大最小值",src:"https://codepen.io/JingW/embed/dyPZQro?height=531&theme-id=default&default-tab=result",frameborder:"no",allowtransparency:"true",allowfullscreen:"true",style:{width:"100%"}},null,-1),D=e("h3",{id:"间距",tabindex:"-1"},[s("间距 "),e("a",{class:"header-anchor",href:"#间距","aria-label":'Permalink to "间距"'},"​")],-1),C=e("h4",{id:"行间距",tabindex:"-1"},[s("行间距 "),e("a",{class:"header-anchor",href:"#行间距","aria-label":'Permalink to "行间距"'},"​")],-1),P=e("iframe",{height:"439",scrolling:"no",title:"06-grid-行间距row-gap",src:"https://codepen.io/JingW/embed/ExabOqB?height=439&theme-id=default&default-tab=result",frameborder:"no",allowtransparency:"true",allowfullscreen:"true",style:{width:"100%"}},null,-1),T=e("h4",{id:"列间距",tabindex:"-1"},[s("列间距 "),e("a",{class:"header-anchor",href:"#列间距","aria-label":'Permalink to "列间距"'},"​")],-1),q=e("iframe",{height:"443",scrolling:"no",title:"07-grid-列间距column-gap",src:"https://codepen.io/JingW/embed/QWwOzLr?height=443&theme-id=default&default-tab=result",frameborder:"no",allowtransparency:"true",allowfullscreen:"true",style:{width:"100%"}},null,-1),F=e("h4",{id:"间距简写",tabindex:"-1"},[s("间距简写 "),e("a",{class:"header-anchor",href:"#间距简写","aria-label":'Permalink to "间距简写"'},"​")],-1),S=e("p",null,"使用 gap 规则可以一次定义行、列间距，如果间距一样可以只设置一个值：",-1),B=e("iframe",{height:"437",scrolling:"no",title:"07-grid-间距简写gap",src:"https://codepen.io/JingW/embed/zYxPyOQ?height=437&theme-id=default&default-tab=result",frameborder:"no",allowtransparency:"true",allowfullscreen:"true",style:{width:"100%"}},null,-1),G=a(`<h3 id="网格线命名" tabindex="-1">网格线命名 <a class="header-anchor" href="#网格线命名" aria-label="Permalink to &quot;网格线命名&quot;">​</a></h3><p>通过 grid-template-rows 和 grid-template-columns 定义网格时，网格线可以被命名。网格线名称也可以设置网格项目位置</p><p>分配网格线名称必须用方括号[网格线名称]，然后后面紧跟网格轨道的尺寸值。定义网格线名称时需要避免使用规范中出现的关键词，以免导致混乱。</p><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">grid-template-rows</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">row-1-start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] 1fr [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">row-2-start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] 1fr [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">row-2-end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">grid-template-columns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">col-1-start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] 1fr [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">col-2-start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] 1fr [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">col-3-start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] 1fr [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">col-3-end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><img src="`+d+'" alt="栅格线"></p><p>可以在方括号中添加多个名称来命名网格线名称，使用多外名称命名网格线名称时，名称间要用空格隔开。每一个网格线的名称可以用来定位网格项目的位置</p><p><img src="'+h+`" alt="栅格线多命名"></p><p>使用网格线名称设置网格项目位置和使用网格线号码设置网格项目位置类似，引用网格线名称的时候不应该带方括号</p><p>使用 repeat()函数可以给网格线分配相同的名称。这可以节省一定的时间。</p><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">grid-template-rows</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: repeat(3, [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">row-start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] 1fr [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">row-end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">grid-template-columns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: repeat(3, [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">col-start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] 1fr [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">col-end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>使用 repeat()函数可以给网格线命名，这也导致多个网格线具有相同的网格线名称。相同网格线名称指定网格线的位置和名称，也且会自动在网格线名称后面添加对应的数字，使其网格线名称也是唯一的标识符</p><p><img src="`+p+`" alt="repeat命名栅格线"></p><p>使用相同的网格线名称可以设置网格项目的位置。网格线的名称和数字之间需要用空格分开</p><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">grid-row</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">row-start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 2 / </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">row-end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 3;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">grid-column</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">col-start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> / </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">col-start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 3;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="网格区域命名" tabindex="-1">网格区域命名 <a class="header-anchor" href="#网格区域命名" aria-label="Permalink to &quot;网格区域命名&quot;">​</a></h3><p>像网格线名称一样，网格区域的名称可以使用 grid-template-areas 属性来命名。引用网格区域名称也可以设置网格项目位置。</p><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">grid-template-areas</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: &#39;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> header&#39; &#39;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sidebar&#39; &#39;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">footer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> footer&#39;;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">grid-template-rows</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: 150px 1fr 100px;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">grid-template-columns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: 1fr 200px;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>设置网格区域的名称应该放置在单引号或双引号内，每个名称由一个空格符分开。网格区域的名称，每组（单引号或双引号内的网格区域名称）定义了网格的一行，每个网格区域名称定义网格的一列</p><p><strong>[注意]grid-template-areas: “header header” “content sidebar” “footer footer”;不可以简写为 grid-template-areas: “header” “content sidebar” “footer”;</strong></p><p><img src="`+o+'" alt="grid-template-areas"></p><p>grid-row-start、grid-row-end、grid-column-start 和 grid-column-end 以及简写的 grid-row、grid-column、grid-area 都可以引用网格区域名称，用来设置网格项目位置</p><h3 id="元素定位" tabindex="-1">元素定位 <a class="header-anchor" href="#元素定位" aria-label="Permalink to &quot;元素定位&quot;">​</a></h3><table tabindex="0"><thead><tr><th style="text-align:left;">选项</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">grid-row-start</td><td style="text-align:left;">行开始栅格线</td></tr><tr><td style="text-align:left;">grid-row-end</td><td style="text-align:left;">行结束栅格线</td></tr><tr><td style="text-align:left;">grid-column-start</td><td style="text-align:left;">列开始栅格线</td></tr><tr><td style="text-align:left;">grid-column-end</td><td style="text-align:left;">列结束栅格线</td></tr></tbody></table><h4 id="根据栅格线" tabindex="-1">根据栅格线 <a class="header-anchor" href="#根据栅格线" aria-label="Permalink to &quot;根据栅格线&quot;">​</a></h4><p>通过设置具体的第几条栅格线来设置区域位置，设置的数值可以是正数和负数：</p>',25),V=e("iframe",{height:"435",scrolling:"no",title:"09-grid-栅格线",src:"https://codepen.io/JingW/embed/oNgomod?height=435&theme-id=default&default-tab=css,result",frameborder:"no",allowtransparency:"true",allowfullscreen:"true",style:{width:"100%"}},null,-1),I=e("h4",{id:"根据栅格命名",tabindex:"-1"},[s("根据栅格命名 "),e("a",{class:"header-anchor",href:"#根据栅格命名","aria-label":'Permalink to "根据栅格命名"'},"​")],-1),N=e("iframe",{height:"436",scrolling:"no",title:"10-grid-栅格线命名",src:"https://codepen.io/JingW/embed/mdyqvgZ?height=436&theme-id=default&default-tab=css,result",frameborder:"no",allowtransparency:"true",allowfullscreen:"true",style:{width:"100%"}},null,-1),J=a('<h4 id="根据偏移量" tabindex="-1">根据偏移量 <a class="header-anchor" href="#根据偏移量" aria-label="Permalink to &quot;根据偏移量&quot;">​</a></h4><p>使用 <code>span</code> 可以设置移动单元格数量，数值只能为正数。</p><ul><li>设置在 <code>grid-*-end</code> 表示 <code>grid-*-end</code> 栅格线是从 <code>grid-*-start</code> 移动几个单元格</li><li>设置在 <code>grid-*-start</code> 表示 <code>grid-*-start</code> 栅格线是从 <code>grid-*-end</code> 移动几个单元格</li></ul>',3),W=e("iframe",{height:"445",scrolling:"no",title:"11-grid-偏移量",src:"https://codepen.io/JingW/embed/dyPZrOE?height=445&theme-id=default&default-tab=css,result",frameborder:"no",allowtransparency:"true",allowfullscreen:"true",style:{width:"100%"}},null,-1),j=a(`<h4 id="推荐-简写模式-grid-row-grid-column" tabindex="-1">[推荐]简写模式 grid-row/grid-column <a class="header-anchor" href="#推荐-简写模式-grid-row-grid-column" aria-label="Permalink to &quot;[推荐]简写模式 grid-row/grid-column&quot;">​</a></h4><p>可以使用 <code>grid-row</code> 设置行开始栅格线，使用 <code>grid-column</code> 设置结束栅格线。</p><p>上例中的居中对齐元素，可以使用以下简写的方式声明（推荐）。</p><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">grid-row</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: 2/3;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">grid-column</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: 2/3;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>`,4),R=e("iframe",{height:"438",scrolling:"no",title:"12-grid-grid-row/grid-column简写形式",src:"https://codepen.io/JingW/embed/bGNabrX?height=438&theme-id=default&default-tab=css,result",frameborder:"no",allowtransparency:"true",allowfullscreen:"true",style:{width:"100%"}},null,-1),L=a('<h4 id="简写形式-grid-area" tabindex="-1">简写形式 grid-area <a class="header-anchor" href="#简写形式-grid-area" aria-label="Permalink to &quot;简写形式 grid-area&quot;">​</a></h4><p><code>grid-area</code> 更加简洁是同时对 <code>grid-row</code> 与 <code>grid-column</code> 属性的组合声明。</p><p>语法结构如下：</p><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">grid-row-start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">grid-column-start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">grid-row-end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">grid-column-end</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>下面是将元素定位在中间的示例：</p>',5),Q=e("iframe",{height:"412",scrolling:"no",title:"13-grid-grid-area简写形式",src:"https://codepen.io/JingW/embed/mdypbBQ?height=412&theme-id=default&default-tab=css,result",frameborder:"no",allowtransparency:"true",allowfullscreen:"true",style:{width:"100%"}},null,-1),O=a('<h3 id="栅格流动" tabindex="-1">栅格流动 <a class="header-anchor" href="#栅格流动" aria-label="Permalink to &quot;栅格流动&quot;">​</a></h3><p>在容器中设置<code>grid-auto-flow</code> 属性可以改变单元流动方式。</p><table tabindex="0"><thead><tr><th style="text-align:left;">选项</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">column</td><td style="text-align:left;">按列排序</td></tr><tr><td style="text-align:left;">row</td><td style="text-align:left;">按行排列</td></tr></tbody></table><h4 id="栅格流动的基本使用" tabindex="-1">栅格流动的基本使用 <a class="header-anchor" href="#栅格流动的基本使用" aria-label="Permalink to &quot;栅格流动的基本使用&quot;">​</a></h4>',4),z=e("iframe",{height:"557",scrolling:"no",title:"14-grid-grid-auto-flow栅格流动",src:"https://codepen.io/JingW/embed/gObobYm?height=557&theme-id=default&default-tab=css,result",frameborder:"no",allowtransparency:"true",allowfullscreen:"true",style:{width:"100%"}},null,-1),Z=e("h4",{id:"强制填充",tabindex:"-1"},[s("强制填充 "),e("a",{class:"header-anchor",href:"#强制填充","aria-label":'Permalink to "强制填充"'},"​")],-1),Y=e("p",null,"当元素在栅格中放不下时，将会发生换行产生留白，使用 grid-auto-flow: row dense; 可以执行填充空白区域操作。",-1),$=e("iframe",{height:"495",scrolling:"no",title:"15-grid-强制填充",src:"https://codepen.io/JingW/embed/eYmymZX?height=495&theme-id=default&default-tab=css,result",frameborder:"no",allowtransparency:"true",allowfullscreen:"true",style:{width:"100%"}},null,-1),X=a('<h3 id="栅格对齐" tabindex="-1">栅格对齐 <a class="header-anchor" href="#栅格对齐" aria-label="Permalink to &quot;栅格对齐&quot;">​</a></h3><p>可以通过属性方便的定义栅格的对齐方式，可用值包括 <code>start | end | center | stretch | space-between | space-evenly | space-around</code>。</p><table tabindex="0"><thead><tr><th style="text-align:left;">选项</th><th style="text-align:left;">说明</th><th style="text-align:left;">对象</th></tr></thead><tbody><tr><td style="text-align:left;">align-items</td><td style="text-align:left;">栅格内所有元素的垂直排列方式</td><td style="text-align:left;">栅格容器</td></tr><tr><td style="text-align:left;">justify-items</td><td style="text-align:left;">栅格内所有元素的横向排列方式</td><td style="text-align:left;">栅格容器</td></tr><tr><td style="text-align:left;">justify-content</td><td style="text-align:left;">所有栅格在容器中的水平对齐方式，容器有额外空间时</td><td style="text-align:left;">栅格容器</td></tr><tr><td style="text-align:left;">align-content</td><td style="text-align:left;">所有栅格在容器中的垂直对齐方式，容器有额外空间时</td><td style="text-align:left;">栅格容器</td></tr><tr><td style="text-align:left;">align-self</td><td style="text-align:left;">元素在栅格中垂直对齐方式</td><td style="text-align:left;">栅格元素</td></tr><tr><td style="text-align:left;">justify-self</td><td style="text-align:left;">元素在栅格中水平对齐方式</td><td style="text-align:left;">栅格元素</td></tr></tbody></table>',3),K=e("iframe",{height:"559",scrolling:"no",title:"16-grid-元素对齐",src:"https://codepen.io/JingW/embed/LYEeERG?height=559&theme-id=default&default-tab=css,result",frameborder:"no",allowtransparency:"true",allowfullscreen:"true",style:{width:"100%"}},null,-1),H=a('<h4 id="组合简写-place-content" tabindex="-1">组合简写 place-content <a class="header-anchor" href="#组合简写-place-content" aria-label="Permalink to &quot;组合简写 place-content&quot;">​</a></h4><p>用于控制栅格的对齐方式，语法如下：</p><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">place-content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">align-content</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">justify-content</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="组合简写-place-items" tabindex="-1">组合简写 place-items <a class="header-anchor" href="#组合简写-place-items" aria-label="Permalink to &quot;组合简写 place-items&quot;">​</a></h4><p>控制所有元素的对齐方式，语法结构如下：</p><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">place-items</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">align-items</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">justify-items</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="组合简写-place-self" tabindex="-1">组合简写 place-self <a class="header-anchor" href="#组合简写-place-self" aria-label="Permalink to &quot;组合简写 place-self&quot;">​</a></h4><p>控制单个元素的对齐方式</p><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">place-self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">align-self</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">justify-self</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h3><ul><li><a href="https://www.cnblogs.com/wangxiang9528/p/9867822.html" target="_blank" rel="noreferrer">Grid 布局方式的实例详解</a></li></ul>',11),M=[g,k,u,m,b,E,y,_,f,x,w,v,A,D,C,P,T,q,F,S,B,G,V,I,N,J,W,j,R,L,Q,O,z,Z,Y,$,X,K,H];function U(ee,se,ae,ie,te,le){return l(),t("div",null,M)}const de=i(c,[["render",U]]);export{re as __pageData,de as default};
