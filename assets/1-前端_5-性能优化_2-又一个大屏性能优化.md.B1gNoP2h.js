import{_ as s,c as i,o as a,a5 as n}from"./chunks/framework.CAnTzXjG.js";const l="/blogs/assets/%E5%8F%88%E4%B8%80%E4%B8%AA%E5%A4%A7%E5%B1%8F%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/s.png",o=JSON.parse('{"title":"又一个大屏性能优化","description":"","frontmatter":{"date":"2023-04-10T00:00:00.000Z"},"headers":[],"relativePath":"1-前端/5-性能优化/2-又一个大屏性能优化.md","filePath":"1-前端/5-性能优化/2-又一个大屏性能优化.md"}'),h={name:"1-前端/5-性能优化/2-又一个大屏性能优化.md"},p=n('<h1 id="又一个大屏性能优化" tabindex="-1">又一个大屏性能优化 <a class="header-anchor" href="#又一个大屏性能优化" aria-label="Permalink to &quot;又一个大屏性能优化&quot;">​</a></h1><h2 id="起因" tabindex="-1">起因 <a class="header-anchor" href="#起因" aria-label="Permalink to &quot;起因&quot;">​</a></h2><p>又一个大屏项目出现了性能问题:</p><p><img src="'+l+`" alt="大屏截图"></p><p>大致描述下此大屏的特性：</p><ol><li>顶部不规则扇形被切割为5个「阶段」</li><li>每一阶段需要状态动态设置颜色以及流光效果</li><li>「阶段」中存在「流程」，最多能容纳「5」个流程，所以多出来的得进行分页轮播</li><li>底部有不定数量的「系统」，每个「系统」包含系统名称和切换「系统」所耗时间</li><li>由于系统名称可能文字过长，所以一旦超出宽度得无缝滚动从左往右播放</li><li>切换「系统」所耗时间每隔 1s 累加</li><li>底部 3d 连线有虚线流动的动画效果，且根据各自「系统」是否正在切换为依据设置每条线的动画是否启用</li><li>大屏左右两侧是 ECharts 折线图表</li></ol><p>好，至此大屏的功能大致讲清楚了。现在的问题是功能实现了，但上到客户生产环境上动画贼卡。现在客户诉求是在不允许更换电脑（4G内存，英伟达T600显卡）的前提下，让动画效果尽量丝滑不卡顿。</p><h2 id="是否有内存泄漏" tabindex="-1">是否有内存泄漏？ <a class="header-anchor" href="#是否有内存泄漏" aria-label="Permalink to &quot;是否有内存泄漏？&quot;">​</a></h2><p>一般情况下，如果大屏长时间运行，或者高屏 ws 推送或者 http 拉取数据，是有可能内存泄漏的。所以抱着有枣没枣打一竿子的心态，先使用 Chrome 的开发者工具「Performance monitor」看下实时 CPU 占用和 JS 大小。然后观察了一会，js 内存没有明显上涨，看起来是没有内存泄漏，保险起见，使用「Memory」对比了前后两次快照，发现也没有 Detached 游离对象。所以这条优化线路被 PASS 。</p><h2 id="css动画-vs-javascript动画-的性能" tabindex="-1">CSS动画 VS JavaScript动画 的性能 <a class="header-anchor" href="#css动画-vs-javascript动画-的性能" aria-label="Permalink to &quot;CSS动画 VS JavaScript动画 的性能&quot;">​</a></h2><p>由于底部 3d 连线我是使用 <code>canvas + requestAnimationFrame</code> 实现的（核心代码如下）:</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startAnimation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clearCanvas</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">layoutLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lastTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Date.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dashOffset </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> refreshInterval </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> dashSpeed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> animation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> currentTime</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Date.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> deltaTime</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> currentTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lastTime;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (deltaTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> refreshInterval) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.canvasLineList.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">pathInfo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">animate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pathInfo;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (animate) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          dashOffset </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (dashOffset </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dashSpeed </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> deltaTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dashOffset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dashOffset);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          lastTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> currentTime;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      });</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.layer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">batchDraw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    requestAnimationFrame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(animation);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  requestAnimationFrame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(animation);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>说白了就是使用 <code>requestAnimationFrame</code> 去不断更新每条连线的 <code>dashOffset</code> 从而达到虚线流动的动画效果。而这个操作是会加重电脑 CPU 负荷的（频繁地修改元素的属性会导致浏览器频繁地进行重绘和重排，这会占用较多的CPU资源。当频繁修改属性时，浏览器可能无法及时处理其他任务，导致页面卡顿或响应变慢。），尤其生产环境电脑还只有4G内存。</p><p>所以我的目光就聚焦到了连线动画上，把 <code>canvas + requestAnimationFrame</code> 方案改为了 <code>svg + css3</code> 动画。</p><p>改完后上了生产，在 ws 没有高屏高量的推送数据的情况下，动画效果看起来还行，算不上很丝滑吧但起码不卡了。</p><p>（想了解更多 CSS 动画与 JavaScript 动画的性能的比较，可以点击 <a href="https://developer.mozilla.org/zh-CN/docs/Web/Performance/CSS_JavaScript_animation_performance" target="_blank" rel="noreferrer">这里的 MDN</a>）</p><h2 id="还需要优化" tabindex="-1">还需要优化？ <a class="header-anchor" href="#还需要优化" aria-label="Permalink to &quot;还需要优化？&quot;">​</a></h2><p>本以为优化就到此结束了，哪知道还没过半小时又开始 Call 我，说不推送数据还好，一推送数据就又开始卡了，计时器会在推送数据时卡住，然后等推送完毕后过一会，突然从01s连续展示02、03、04直到05s然后继续每隔1s累加。看起来是线程卡死，导致 <code>setInterval</code> 延后执行了。</p><p>然后又阅读了代码，发现底部连线上的「系统」中的「系统名称」滚动和「系统切换」计时，都是一个个 <code>setInterval</code> 独立运行。这一个「系统」俩计时器，ws 推送时突然推过来20来个「系统」，不就40多个计时器了？</p><p>找到问题所在后就开始着手优化，首先是「系统名称」的滚动，改为了 <code>js + 调整offsetWidth + css3</code> 的方式代替 <code>setInterval</code> ，能减少 CPU 占用。</p><p>而对于「系统计时」功能，由于不管每个系统当前的切换时间相不相同，都会在 ws 推送时拿到各自最新时间然后后续定时器累加，所以干脆定一个一个统一计时器，然后用一个对象去记录所有需要计时的系统时间，然后统一在一个计时器中统一各自累加。这样能减少20多个计时器，也能提高系统性能。</p><p>最后我也用同样的方式优化了顶部扇形中「流程」轮播图的计时功能。</p><p>到此客户在生产环境下的大屏就不存在卡顿现象了，动画非常的丝滑。</p>`,23),e=[p];function t(k,r,E,d,c,g){return a(),i("div",null,e)}const F=s(h,[["render",t]]);export{o as __pageData,F as default};
